# Designing a Perceptron Apparatus

```elixir
Mix.install([
  {:perceptron_apparatus, path: "~/Documents/edex/human-scale-ai/perceptron_apparatus"}
])

alias PerceptronApparatus, as: PA
alias PerceptronApparatus.Rings
```

## Build yourself an apparatus

```elixir
log_ring = Rings.SlideRule.log_rule() |> Rings.SlideRule.new()
relu_ring = Rings.SlideRule.relu_rule(10, 0.25) |> Rings.SlideRule.new()

input_ring = Rings.AzimuthalSliders.new({25}, PA.Utils.new_rule(0, 1, 0.1, 0.5))
w1_ring = Rings.RadialSliders.new({5, 25}, PA.Utils.new_rule(-10, 10, 2, 10))
h1_ring = Rings.AzimuthalSliders.new({5},  PA.Utils.new_rule(0, 10, 1, 5))
w2_ring = Rings.RadialSliders.new({10, 5}, PA.Utils.new_rule(-10, 10, 2, 10))
# output_ring = Rings.AzimuthalSliders.new({10})
output_ring = Rings.RadialSliders.new({10, 1}, PA.Utils.new_rule(0, 1, 0.1, 0.5))

PA.new(1200)
|> PA.add_ring(log_ring)
|> PA.add_ring(relu_ring)
|> PA.add_ring(input_ring)
|> PA.add_ring(w1_ring)
|> PA.add_ring(h1_ring)
|> PA.add_ring(w2_ring)
|> PA.add_ring(output_ring)
|> PA.render()
|> tap(fn data -> File.write!("/tmp/apparatus-v2.svg", data) end)
|> Kino.HTML.new()
```

## HEEx testing

```elixir
import Phoenix.Component, only: [sigil_H: 2]

test_component = fn assigns ->
  ~H"""
  <p>Hi <%= @name %>.</p>
  """
end

test_component.(%{name: "Mum"})
|> Phoenix.HTML.Safe.to_iodata()
|> Enum.join()
```
